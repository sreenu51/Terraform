
Terraform provider?
A provider is a Terraform plugin that allows users to manage an external API. 
Provider plugins like the AWS provider or the cloud-init provider act as a translation layer that allows Terraform to communicate with many different cloud providers, databases, and services.

Terraform Init?
The terraform init command is used to initialize a working directory containing Terraform configuration files.
This is the first command that should be run after writing a new Terraform configuration or cloning an existing one from version control. It is safe to run this command multiple times.

Terraform apply?
terraform apply command performs a plan just like terraform plan does, but then actually carries out the planned changes to each resource using the relevant infrastructure provider's API. 
It asks for confirmation from the user before making any changes, unless it was explicitly told to skip approval.

Terraform destroy?
Run terraform destroy – without --target argument

Terraform Plan?
which lets you preview the changes that Terraform plans to make to your infrastructure


Terraform validate?
terraform validate — Validates the configuration files in your directory, and does not access any remote state or services.
terraform init should be run before this command

Terraform Module?
Module is one or more configuration files in a single directory ,Terraform can also support local and remote modules

Terraform registory ?
The Terraform Registry acts as a centralized repository for module sharing, making modules easier to discover and reuse

Terraform workflow?
write - checkout the latest code
plan - Run the terraform plan and raise a PR
Create - merge and create

what is arguments?
To configure the resources in provider we need to define the arguments

Meta Arguments?
These are Terraform specific arguments which defines inside the arguments (count,dependson, for_each, provider, Lifecycle,) 

Attribute?
Attributes are values exposed by a particular resource 
syntax: resource_type.resource_name.attribute_name

Terraform Top level Blocks?
. Settings Block
. Provider Block
. Resource block 
. Input variable block
. Output variable block
. Local values block
. Data source block 
. Modules block


Terraform fundamental block? Or settings block? 
special block which is used to configure some behaviours
specifying a required version of terraform
specifying provider requirements
configuring terraform state

Provider block?
Heart of the terraform
Terraform relies on providers to interact with remote systems
Declear providers for terraform to install providers
provider configuration is belong to root module



Resource block ?
Each resource block describes one or more infracture objects 
declear  resources

Terraform state file?
what ever the resources we created in cloud , same set of configurations will be stored in local state file 
state file is just same as database of terraform 

Terraform init ->  initialize the repo with remote server (.terraform.lock.hcl) file will be created , this file contains authantication information about local and remote server
terraform apply -> terraform.tfstate file will be created it contains resources information for what we created in cloud service provider

Multiple Providers?
The primary reason for multiple provider is to support multiple regions 
we can define multiple configurations for the same provider, and select which one to use on a per-resource and per module basis
we can use alternate provider in a resource , data or module by referencing it as alias

Terraform resource Meta arguments?
- Meta arguments can be used with any resource type to change the behaviours fo the resource
- depends_on = To handle hidden resources or modules
- count = for creating multiple resources accourding to the count
- for_each = for creating multiple instances accourding to a map or set of strings
- provider = for selecting non-default provider configurations
- Lifecycle = 
- provisioners & Connections = for taking extra actions after creating the resources 







